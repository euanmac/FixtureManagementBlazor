@page "/fixtures"
@attribute [StreamRendering]
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject ApplicationDbContext MyDbContext
@inject AuthenticationStateProvider AuthenticationStateProvider
@using FixtureManagementBlazor.Models
@using FixtureManagementBlazor.ViewModels
@using MudBlazor

<PageTitle>Fixtures</PageTitle>

@if (fixturesFiltered == null)
{
    <p><em>Loading...</em></p>
}
else
{
    
    @* <MudStack Row="true" class="pa-4" AlignItems="AlignItems.Center" Wrap="Wrap.Wrap"> *@
    <MudGrid>
        <MudItem xs="2">
            
        @* <MudTextField Format="yyyy-MM-dd" T="DateTime?" Label="Start Date"  InputType="InputType.Date" @bind-Value="startDate" Variant="Variant.Outlined" Margin="Margin.Dense" style="@filterStyleOverride" />
        <MudTextField Format="yyyy-MM-dd" T="DateTime?" Label="End Date"  InputType="InputType.Date" @bind-Value="endDate" Variant="Variant.Outlined" Margin="Margin.Dense" style="@filterStyleOverride" /> *@

            @* <MudStack Row='true' Justify="Justify.FlexStart" Wrap="Wrap.Wrap"> *@
                <MudChipSet T="string" SelectionMode="SelectionMode.MultiSelection" CheckMark="true" Variant="Variant.Text">
                    <MudChip Value="@("Home")" @bind-Selected="filterIncludeHome" Color="Color.Dark"/>
                    <MudChip Value="@("Away")" @bind-Selected="filterIncludeAway" Color="Color.Primary"/>
                </MudChipSet>
        </MudItem>
        <MudItem xs="4">
                <MudGrid>
                    <MudItem xs="3">
                        <MudDatePicker Label="Start Date" @bind-Date="startDate" style="@filterStyleOverride" Variant="Variant.Outlined" InnerPadding="false" IconSize="Size.Small" Margin="Margin.Dense" St/>
                    </MudItem>
                    <MudItem xs="3">
                        <MudDatePicker Label="End Date" @bind-Date="endDate" style="@filterStyleOverride"  Variant="Variant.Outlined" InnerPadding="false" IconSize="Size.Small" Margin="Margin.Dense"/>
                    </MudItem>
                    <MudItem xs="6">
                        <MudTextField @bind-Value="searchString" Label="Search" Adornment="Adornment.Start" Variant="Variant.Outlined" Immediate="true" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small" Margin="Margin.Dense" Clearable="true"></MudTextField> 
                    </MudItem>
                </MudGrid>        
                @* <MudStack Row="true">
                        <MudDatePicker Label="Start Date" @bind-Date="startDate" style="@filterStyleOverride" Variant="Variant.Outlined" InnerPadding="false" IconSize="Size.Small" Margin="Margin.Dense" St/>
                        <MudDatePicker Label="End Date" @bind-Date="endDate" style="@filterStyleOverride"  Variant="Variant.Outlined" InnerPadding="false" IconSize="Size.Small" Margin="Margin.Dense"/>
                        <MudTextField @bind-Value="searchString" Label="Search" Adornment="Adornment.Start" Variant="Variant.Outlined" Immediate="true" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small" Margin="Margin.Dense" Clearable="true"></MudTextField> 
                </MudStack> *@
            @* </MudStack> *@
        </MudItem>
        <MudItem xs="4">
            <MudStack Row="true" Justify="Justify.FlexEnd">
                <MudFab StartIcon="@Icons.Material.Filled.Add" DropShadow="false" hidden="@(!isAuthenticated)" Size="Size.Small" Class="" Href="/fixture/create" Color="Color.Primary"/>
                <MudFab StartIcon="@Icons.Material.Filled.Download" DropShadow="false" Size="Size.Small" Color="Color.Dark"/>
            </MudStack>
        </MudItem>
    </MudGrid>    
    <MudStack Row="true">
        <MudStack Row="true" AlignItems="AlignItems.Center">
            <MudChipSet T="string" SelectionMode="SelectionMode.MultiSelection" CheckMark="true" Variant="Variant.Text">
                <MudChip Value="@("Home")" @bind-Selected="filterIncludeHome" Color="Color.Dark"/>
                <MudChip Value="@("Away")" @bind-Selected="filterIncludeAway" Color="Color.Primary"/>
            </MudChipSet>
        </MudStack>        
        <MudStack Row="true">
                <MudGrid>
                    <MudItem xs="3">
                        <MudDatePicker Label="Start Date" @bind-Date="startDate" style="@filterStyleOverride" Variant="Variant.Outlined" InnerPadding="false" IconSize="Size.Small" Margin="Margin.Dense" St/>
                    </MudItem>
                    <MudItem xs="3">
                        <MudDatePicker Label="End Date" @bind-Date="endDate" style="@filterStyleOverride"  Variant="Variant.Outlined" InnerPadding="false" IconSize="Size.Small" Margin="Margin.Dense"/>
                    </MudItem>
                    <MudItem xs="6">
                        <MudTextField @bind-Value="searchString" Label="Search" Adornment="Adornment.Start" Variant="Variant.Outlined" Immediate="true" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small" Margin="Margin.Dense" Clearable="true"></MudTextField> 
                    </MudItem>
                </MudGrid>  
        </MudStack>
        @* <MudSpacer/> *@
        <MudStack Row="true" Justify="Justify.FlexEnd" AlignItems="AlignItems.Center" Wrap="Wrap.Wrap">
            <MudFab StartIcon="@Icons.Material.Filled.Add" DropShadow="false" hidden="@(!isAuthenticated)" Size="Size.Small" Class="" Href="/fixture/create" Color="Color.Primary"/>
            <MudFab StartIcon="@Icons.Material.Filled.Download" DropShadow="false" Size="Size.Small" Color="Color.Dark"/>
        </MudStack>
    </MudStack>
    @* </MudStack>          *@
    <FixtureGrid CanEdit="@isAuthenticated" Fixtures="@fixturesFiltered" SearchString="@searchString" TeamHidden="false"></FixtureGrid>
}

@code {

    private string filterStyleOverride = "font-size:0.9rem;";
    
    private bool filterIncludeHome = true;
    private bool filterIncludeAway = false;

    private IQueryable<FixtureViewModel> fixtures = Enumerable.Empty<FixtureViewModel>().AsQueryable(); 
    private DateTime? startDate = DateTime.Now.Date;
    private DateTime? endDate = DateTime.Now.AddDays(14);
    private bool isAuthenticated = false;

    private string searchString = "";
    IQueryable<FixtureViewModel> fixturesFiltered
    {
        get
        {
            var result = fixtures
                .Where(f => (f.Date >= DateOnly.FromDateTime((startDate ?? DateTime.Now)) && (f.Date <= DateOnly.FromDateTime(endDate ?? DateTime.MaxValue))));
            result = result.Where(f => ((f.IsHome && filterIncludeHome) || (!f.IsHome && filterIncludeAway)));
            return result;
        }
    }

    protected override async Task OnInitializedAsync()
    {

        // Simulate asynchronous loading to demonstrate streaming rendering
        using var context = DbFactory.CreateDbContext();
        
        //Check whether authenticated
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        isAuthenticated = (user.Identity is not null && user.Identity.IsAuthenticated);

        fixtures = (await context.Fixture
                .Include(f => f.Team)
                .Include(f => f.FixtureAllocation)
                    .ThenInclude(fa => fa!.Pitch)
                .OrderBy(f => f.Date)
                    .ThenBy(f => f.Team!.AgeGroup)
                .ToListAsync())
                .Select(f => new FixtureViewModel(f, isAuthenticated))
                .AsQueryable();
    }

    Converter<DateOnly> converter = new Converter<DateOnly>
    {
        SetFunc = value => value.ToString("dd/MM/YYYY"),
        GetFunc = text => DateOnly.Parse(text!),
    };

    private Func<FixtureViewModel, bool> quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        if (x.Opponent.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Team.Contains (searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

}

    @* <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Team</th>
                <th>Opponent</th>
                <th>Home</th>
            </tr>
        </thead>
        <tbody> 
            @foreach (var fixture in Fixture)
            {
                <tr>
                    <td>@fixture.Date.ToShortDateString()</td>
                    <td>@fixture.Team!.Name</td>
                    <td>@fixture.Opponent</td>
                    <td>@fixture.IsHome</td>
                </tr>
            }
        </tbody>
    </table> *@