@page "/fixture/{Action}/{FixtureId:guid}"
@page "/fixture/{Action}"

@inject FixtureManagementBlazor.Data.ApplicationDbContext DB
@inject IDbContextFactory<FixtureManagementBlazor.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@using FixtureManagementBlazor.Models
@using Microsoft.AspNetCore.Authorization
@using MudBlazor

@attribute [Authorize]

<MudText Class="mb-4" Typo="Typo.h5">Fixture | @(action)</MudText>

<EditForm method="post" Model="Fixture" OnValidSubmit="UpdateFixture" FormName="create" Enhance>
    <DataAnnotationsValidator />
    <MudCard Style="max-width:400">
        <MudCardContent>      
            <MudStack Justify="Justify.FlexStart" AlignItems="AlignItems.Stretch" Spacing="5">
                @* <label for="date" class="form-label">Team:</label>  *@
                <MudSelect Label="Team" @bind-Value="Fixture!.TeamId" Strict="true" For="() => Fixture!.TeamId">
                    @* <option value="">Select Team</option> *@
                    @foreach (var team in teamList)
                    {
                        <MudSelectItem Value="@team.Id">@team.DisplayName</MudSelectItem>
                    }
                </MudSelect> 
                <ValidationMessage For="() => Fixture.Team" /> 
                <MudTextField @bind-Value="Fixture.Opponent" For="() => Fixture.Opponent" Label="Opponent"/>  
                <MudDatePicker Label="Date"  @bind-Date="FixtureDate" Class=""/>             
                <MudSelect @bind-Value="Fixture.FixtureType" Label="Fixture Type">
                        @foreach (FixtureType ftype in Enum.GetValues(typeof(FixtureType)))
                        {
                            <MudSelectItem Value="@ftype">@ftype</MudSelectItem>
                        }
                </MudSelect>
                @* <MudCheckBox @bind-Value="Fixture.IsHome" Label="Is Home"/>   *@
                <MudSwitch @bind-Value="Fixture.IsHome" Label="Home" Color="Color.Primary"/>  

                @* <div class="mb-3">
                    <label for="ishome" class="form-label">IsHome:</label> 
                    <InputCheckbox id="ishome" @bind-Value="Fixture.IsHome" class="form-check-input" /> 
                    <ValidationMessage For="() => Fixture.IsHome" class="text-danger" /> 
                </div>        
                <div class="mb-3">
                    <label for="opponent" class="form-label">Opponent:</label> 
                    <InputText id="opponent" @bind-Value="Fixture.Opponent" class="form-control" /> 
                    <ValidationMessage For="() => Fixture.Opponent" class="text-danger" /> 
                </div>        
                <div class="mb-3">
                    <label for="fixturetype" class="form-label">FixtureType:</label> 
                    <InputSelect id="fixturetype" @bind-Value="Fixture.FixtureType" class="form-control">
                        @foreach (var ftype in Enum.GetValues(typeof(FixtureType)))
                        {
                            <MudSelectItem Value="@ftype">@ftype</MudSelectItem>
                        }
                    </InputSelect>
                    
                    <ValidationMessage For="() => Fixture.FixtureType" class="text-danger" /> 
                </div> *@
            </MudStack>
        </MudCardContent>
    </MudCard>
    <MudButton Href="/fixtures" Variant="Variant.Filled" Color="Color.Default" Class="mt-4 mr-2">Cancel</MudButton>
    @if (action == ComponentAction.Delete) {
        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Error" Class="mt-4 mr-2">Delete</MudButton>
    } else {
        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="mt-4 mr-2">Save</MudButton>
    }
    
</EditForm>

@code {

    [SupplyParameterFromForm]
    public Fixture? Fixture { get; set; } 

    [Parameter]
    public Guid? FixtureId {get; set;}  

    private ComponentAction? action;

    [Parameter]
    public string? Action { get; set; }

    private Guid? FixtureTeamId {
        get {
            return Fixture!.Team == null ? null : Fixture!.Team.Id;
        }
        set {
            if (Fixture != null) {
                Fixture.TeamId = (value ?? Guid.Empty);
                Fixture.Team = teamList.First(t => t.Id == value);
            }
        }
    } 

    private DateTime? FixtureDate {
        get {
            return Fixture!.Date.ToDateTime(TimeOnly.MinValue);
        }
        set {
            Fixture!.Date = DateOnly.FromDateTime(value ?? DateTime.Now);
        }
    }
    private IQueryable<Team> teamList = Enumerable.Empty<Team>().AsQueryable();



    public override async Task SetParametersAsync(ParameterView parameters)
    {
        if (parameters.TryGetValue<string>(nameof(Action), out var value)) 
        {
            ComponentAction tAction;
            if (Enum.TryParse(value, true, out tAction)) 
            {
                 action = tAction;                 
            } 
            else 
            {
                action = null;
            }
        }
        await base.SetParametersAsync(parameters);
    }

    protected override async Task OnInitializedAsync()
    {
  
    //Ensure correct URL parameter combination provided
        if (action == null) {
            NavigationManager.NavigateTo("notfound");
        }

        if (action != ComponentAction.Create && FixtureId == Guid.Empty) {
            NavigationManager.NavigateTo("notfound");
        }

        using var context = DbFactory   .CreateDbContext();

        //Create new fixture for create actions otherwise find
        if (action == ComponentAction.Create) 
        {
            Fixture = new Fixture() {Date = DateOnly.FromDateTime(DateTime.Now), IsHome = true, FixtureType = FixtureType.League};
        } 
        else 
        {
            Fixture = await context.Fixture
                .FirstAsync(m => m.Id == FixtureId);
        }

        teamList = (await context.Team
            .ToListAsync())
            .OrderBy(t => t.AgeGroup)
            .ThenBy(t => t.Gender)
            .ThenBy(t => t.Name)
            .AsQueryable();
    }

    // To protect from overposting attacks, see https://aka.ms/RazorPagesCRUD
    public async Task UpdateFixture()
    {   
        switch (action) 
        {
            case ComponentAction.Create:
                await AddFixture();
                break;
            case ComponentAction.Edit:
                await EditFixture();
                break;
            case ComponentAction.Delete:
                await DeleteFixture();
                break;
        }
        NavigationManager.NavigateTo("/fixtures");
    }

    private async Task AddFixture() {
        using var context = DbFactory.CreateDbContext();
        context.Fixture.Add(Fixture!);
        await context.SaveChangesAsync();
    }

    private async Task EditFixture() {
        using var context = DbFactory.CreateDbContext();
        //Remove reference link otherwise it doesnt save properly
        Fixture!.Team = null;
        context.Update(Fixture!);
        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!FixtureExists(Fixture!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }
    }

    private async Task DeleteFixture() {

        using var context = DbFactory.CreateDbContext();
        //Remove reference link as it may try and delete team as well
        //Fixture!.Team = null;
        context.Remove(Fixture!);
        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!FixtureExists(Fixture!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }
    }

    private bool FixtureExists(Guid id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Fixture.Any(e => e.Id == id);
    }

    enum ComponentAction {
        Create, Read, Edit, Delete
    }

}

