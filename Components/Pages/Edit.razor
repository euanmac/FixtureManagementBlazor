@* @page "/fixtures/edit"
@using Microsoft.EntityFrameworkCore
@using FixtureManagementBlazor.Models
@inject IDbContextFactory<FixtureManagementBlazor.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Fixture</h2>
<hr />
@if (Fixture is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="@Fixture" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator/>
    <MudGrid>
        <MudItem xs="12" sm="7">
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="Opponent" HelperText="Cant be blank"
                        @bind-Value="Fixture.Opponent" For="@(() => Fixture.Opponent)"/>
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Register</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="5">
            <MudPaper Class="pa-4 mud-height-full">
                <MudText Typo="Typo.subtitle2">Validation Summary</MudText>
                @if (success)
                {
                    <MudText Color="Color.Success">Success</MudText>
                }
                else
                {
                    <MudText Color="@Color.Error">
                        <ValidationSummary />
                    </MudText>
                }
            </MudPaper>
        </MudItem>
        <MudItem xs="12">
            <MudText Typo="Typo.body2" Align="Align.Center">
                Fill out the form correctly to see the success message.
            </MudText>
        </MudItem>
    </MudGrid>
</EditForm>

}

<div>
    <a href="/fixtures">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    public Guid FixtureId { get; set; }

    [Parameter]
    public Fixture? Fixture { get; set; }
    bool success;
    @* [SupplyParameterFromForm]
    private Fixture? UpdateFixture { get; set; } *@

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Fixture ??= await context.Fixture.FirstOrDefaultAsync(m => m.Id == FixtureId);

    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task OnValidSubmit()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Fixture!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!FixtureExists(Fixture!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }
        success = true;
        NavigationManager.NavigateTo("/fixtures");
    }

    private bool FixtureExists(Guid id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Fixture.Any(e => e.Id == id);
    }
}
